{
  "easydsa": {
    "prefix": "easydsa",
    "body": [
      "\"/*\\\n",
      "             * ACM ICPC preparation\\\n",
      "             * Author: Sai Tej Sunkara\\\n",
      "             * Topic: \\\n",
      "             * \\\n",
      "             * Sequence Containers: Arrays, Vectors, Deque, Forward List, List\\\n",
      "             * Associative Containers: Map, Set, Multimap, Multiset\\\n",
      "             * Unordered Associative Containers: Unordered Map, Unordered Set, Unordered Multimap, Unordered Multiset\\\n",
      "             * Container Adapters: Stack, Queue, Priority Queue\\\n",
      "            */\\\n",
      "            #include<bits/stdc++.h>\\\n",
      "            #include<ctime>\\\n",
      "            #define int long long int\\\n",
      "            #define double long double\\\n",
      "            #define endl \\\"\\n\\\"\\\n",
      "            #define RUN_LOCAL\\\n",
      "            using namespace std;\\\n",
      "            const int mod = 1e9+7;\\\n",
      "            // Why are we maintaining every value less than 1e+7 although we have a space till 1e18? When we are multiplying 2 numbers of 1e9+7, then they can get stored in 1e18.\\\n",
      "            const int N = 1000000;\\\n",
      "            template<typename D, typename I>\\\n",
      "            inline D binaryExponentiation(D a, I b) {\\\n",
      "                D r = 1;\\\n",
      "                while(b) {\\\n",
      "                    if(b&1) r*=a; r%=mod;\\\n",
      "                    a*=a; a%=mod;\\\n",
      "                    b = b>>1;\\\n",
      "                }\\\n",
      "                return r;\\\n",
      "            }\\\n",
      "            template<typename D, typename I>\\\n",
      "            inline D powExponentiation(D a, I b) { // Binary Exponentiation\\\n",
      "                if(b>=0) {\\\n",
      "                    return binaryExponentiation(a, b);\\\n",
      "                }\\\n",
      "                else {\\\n",
      "                    b = -b;\\\n",
      "                    D r = binaryExponentiation(a, b);\\\n",
      "                    return 1/r;\\\n",
      "                }\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            vector<bool> primeSieve(T N) {\\\n",
      "                vector<bool> sieve(N, true);\\\n",
      "                sieve[0] = false;\\\n",
      "                sieve[1] = false;\\\n",
      "                for(T i=2; i<=N; i++) {\\\n",
      "                    if(sieve[i]) {\\\n",
      "                        for(T j=i*i; j<=N; j=j+i) {\\\n",
      "                            sieve[j] = false;\\\n",
      "                        }\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                return sieve;\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            inline T fastMultiplication(T a, T b) {\\\n",
      "                T r = 0;\\\n",
      "                b%=mod;\\\n",
      "                while(b) {\\\n",
      "                    if(b&1) r+=a; r%=mod;\\\n",
      "                    a+=a;\\\n",
      "                    a%=mod;\\\n",
      "                    b>>=1;\\\n",
      "                }\\\n",
      "                return r;\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            inline T isEven(T a) {\\\n",
      "                if(a&1) return false;\\\n",
      "                else return true;\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            inline T isTwoPower(T a) {\\\n",
      "                if((a&(a-1))==0) return true;\\\n",
      "                else return false;\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            T bug(T x) {\\\n",
      "                cout<<\\\"Bug: \\\"<<x<<endl;\\\n",
      "            }\\\n",
      "            const int matSize = 2;\\\n",
      "            struct Mat {\\\n",
      "                int mat[matSize][matSize];\\\n",
      "                Mat() {\\\n",
      "                    for(int i=0; i<matSize; i++) {\\\n",
      "                        for(int j=0; j<matSize; j++) {\\\n",
      "                            mat[i][j] = 0;\\\n",
      "                        }\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                void identity() {\\\n",
      "                    Mat();\\\n",
      "                    for(int i=0; i<matSize; i++) {\\\n",
      "                        mat[i][i] = 1;\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                void display() {\\\n",
      "                    cout<<\\\"Displaying Matrix: \\\"<<endl;\\\n",
      "                    for(int i=0; i<matSize; i++) {\\\n",
      "                        for(int j=0; j<matSize; j++) {\\\n",
      "                            cout<<mat[i][j]<<\\\" \\\";\\\n",
      "                        }\\\n",
      "                        cout<<endl;\\\n",
      "                    }\\\n",
      "                    cout<<endl;\\\n",
      "                }\\\n",
      "                Mat operator* (Mat a) {\\\n",
      "                    Mat result;\\\n",
      "                    for(int i=0; i<matSize; i++) {\\\n",
      "                        for(int j=0; j<matSize; j++) {\\\n",
      "                            for(int k=0; k<matSize; k++) {\\\n",
      "                                result.mat[i][j] = result.mat[i][j] + mat[i][k]*a.mat[k][j];\\\n",
      "                                result.mat[i][j]%=mod;\\\n",
      "                            }\\\n",
      "                        }\\\n",
      "                    }\\\n",
      "                    return result;\\\n",
      "                }\\\n",
      "            };\\\n",
      "            struct segmentTree {\\\n",
      "                int numberOfNodes;\\\n",
      "                bool isTreeBuilt;\\\n",
      "                vector<int> tree;\\\n",
      "                void initializeTree(vector<int> leafNodes) {\\\n",
      "                    this->numberOfNodes = leafNodes.size()-1;\\\n",
      "                    this->tree.resize(4*leafNodes.size(), 0);\\\n",
      "                    buildTree(leafNodes, 0, leafNodes.size()-1, 0);\\\n",
      "                    this->isTreeBuilt = true;\\\n",
      "                }\\\n",
      "                void buildTree(vector<int> leafNodes, int low, int high, int node) {\\\n",
      "                    int mid = low+(high-low)/2;\\\n",
      "                    if(low==high) {\\\n",
      "                        this->tree.at(node) = leafNodes.at(mid);\\\n",
      "                        return;\\\n",
      "                    }\\\n",
      "                    buildTree(leafNodes, low, mid, 2*node+1);\\\n",
      "                    buildTree(leafNodes, mid+1, high, 2*node+2);\\\n",
      "                    // logic for finding sum in range\\\n",
      "                    this->tree.at(node) = this->tree.at(2*node+1)+this->tree.at(2*node+2);\\\n",
      "                }\\\n",
      "                int searchTree(int lowerBound, int upperBound, int low, int high, int node) {\\\n",
      "                    if(low > upperBound || high < lowerBound) { // No Overlapping\\\n",
      "                        return 0;\\\n",
      "                    }\\\n",
      "                    if(low >= lowerBound && high <= upperBound) { // Complete Overlapping\\\n",
      "                        return this->tree.at(node);\\\n",
      "                    }\\\n",
      "                    // Partial Overlapping\\\n",
      "                    int mid = low+(high-low)/2;\\\n",
      "                    int leftSidedNode = searchTree(lowerBound, upperBound, low, mid, 2*node+1);\\\n",
      "                    int rightSidedNode = searchTree(lowerBound, upperBound, mid+1, high, 2*node+2);\\\n",
      "                    return leftSidedNode+rightSidedNode;\\\n",
      "                }\\\n",
      "                int query(int lowerBound, int upperBound) {\\\n",
      "                    return searchTree(lowerBound, upperBound, 0, numberOfNodes, 0);\\\n",
      "                }\\\n",
      "                void traverseAndUpdateTree(int low, int high, int node, int value, int index) {\\\n",
      "                    if(low==high) {\\\n",
      "                        if(low==index) {\\\n",
      "                            this->tree.at(node) = value;\\\n",
      "                        }\\\n",
      "                        return;\\\n",
      "                    }\\\n",
      "                    int mid = low+(high-low)/2;\\\n",
      "                    traverseAndUpdateTree(low, mid, 2*node+1, value, index);\\\n",
      "                    traverseAndUpdateTree(mid+1, high, 2*node+2, value, index);\\\n",
      "                    this->tree.at(node) = this->tree.at(2*node+1)+this->tree.at(2*node+2);\\\n",
      "                }\\\n",
      "                void updateLeafNode(int index, int value) {\\\n",
      "                    traverseAndUpdateTree(0, numberOfNodes, 0, value, index);\\\n",
      "                }\\\n",
      "                void display() {\\\n",
      "                    for(int i=0; i<tree.size(); i++) {\\\n",
      "                        cout<<this->tree.at(i)<<\\\" \\\";\\\n",
      "                    }\\\n",
      "                    cout<<endl;\\\n",
      "                }\\\n",
      "            };\\\n",
      "            struct fenwickTree {\\\n",
      "                vector<int> tree;\\\n",
      "                int size;\\\n",
      "                void build(vector<int> nums) {\\\n",
      "                    this->size = nums.size()+1;\\\n",
      "                    tree.resize(size, 0);\\\n",
      "                    for(int i=0; i<nums.size(); i++) {\\\n",
      "                        buildFenwickTree(i, nums.at(i));\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                void buildFenwickTree(int x, int n) {\\\n",
      "                    x++;\\\n",
      "                    while(x<=size) {\\\n",
      "                        this->tree.at(x) += n;\\\n",
      "                        x += (x&(-x));\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                int query(int x, int y) {\\\n",
      "                    x++;\\\n",
      "                    y++;\\\n",
      "                    int sumX = 0;\\\n",
      "                    int sumY = 0;\\\n",
      "                    while(x>0) {\\\n",
      "                        sumX += this->tree.at(x);\\\n",
      "                        x-=(x&(-x));\\\n",
      "                    }\\\n",
      "                    while(y>0) {\\\n",
      "                        sumY += this->tree.at(y);\\\n",
      "                        y-=(y&(-y));\\\n",
      "                    }\\\n",
      "                    return sumY-sumX;\\\n",
      "                }\\\n",
      "            };\\\n",
      "            struct squareRootDecomposition {\\\n",
      "                int size;\\\n",
      "                int blockSize;\\\n",
      "                int numberOfBlocks;\\\n",
      "                vector<int> blocksValue;\\\n",
      "                vector<int> nums;\\\n",
      "                void init(vector<int> arr) {\\\n",
      "                    this->nums = arr;\\\n",
      "                    this->size = arr.size();\\\n",
      "                    blockSize = sqrt(arr.size());\\\n",
      "                    numberOfBlocks = (arr.size()/blockSize) + 1;\\\n",
      "                    int sum = 0;\\\n",
      "                    for(int i=0; i<arr.size(); i++) {\\\n",
      "                        sum+=arr.at(i);\\\n",
      "                        if((i+1)%blockSize==0) {\\\n",
      "                            blocksValue.push_back(sum);\\\n",
      "                            sum = 0;\\\n",
      "                        }\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                int query(int low, int high) {\\\n",
      "                    int result = 0;\\\n",
      "                    for(int i=low; i<=high;) {\\\n",
      "                        if((i+1)%blockSize==0 && (i+blockSize+1)<=high) {\\\n",
      "                            result+=nums.at(i);\\\n",
      "                            result += blocksValue.at((i+1)/blockSize);\\\n",
      "                            i+=blockSize+1;\\\n",
      "                        }\\\n",
      "                        else {\\\n",
      "                            result+=nums.at(i);\\\n",
      "                            i++;\\\n",
      "                        }\\\n",
      "                    }\\\n",
      "                    return result;\\\n",
      "                }\\\n",
      "            };\\\n",
      "            int fibonacci(int n) {\\\n",
      "                // Here we don\\'t need F(n) and F(n+1) matrices. We just need them on paper. We will work on powers on T and then by intution, we get the values of F(n) by multiplying by [[1], [0]] \\\n",
      "                Mat r;\\\n",
      "                Mat a;\\\n",
      "                r.identity();\\\n",
      "                for(int i=0; i<matSize; i++) {\\\n",
      "                    for(int j=0; j<matSize; j++) {\\\n",
      "                        int e;\\\n",
      "                        cin>>e;\\\n",
      "                        a.mat[i][j] = e;\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                while(n) {\\\n",
      "                    if(n&1) {\\\n",
      "                        r = r*a;\\\n",
      "                    }\\\n",
      "                    a = a*a;\\\n",
      "                    n>>=1;\\\n",
      "                }\\\n",
      "                return (r.mat[0][0]+r.mat[0][1])%mod;\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            inline T gcd(T min, T max) {\\\n",
      "                if(min==0) {\\\n",
      "                    return max;\\\n",
      "                }\\\n",
      "                return gcd(max%min, min);\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            vector< vector<T> > buildPascalTriangle(T n) { // Pascal Triangle gives NCR\\\n",
      "                n = n+1;\\\n",
      "                vector< vector<T> > pascal(n, vector<T>(n, 0));\\\n",
      "                pascal.at(0).at(0) = 1;\\\n",
      "                for(int i=1; i<n; i++) {\\\n",
      "                    for(int j=0; j<=(i/2); j++) {\\\n",
      "                        pascal.at(i).at(j) = pascal.at(i).at(i-j) = (pascal.at(i-1).at(j)+ ((j-1)>=0?pascal.at(i-1).at(j-1):0)); // NCR = NC(N-R)\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                return pascal;\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            T binomialCoefficient(T a, T b) {\\\n",
      "                if(a>b) {\\\n",
      "                    vector< vector<T> > coefficients = buildPascalTriangle(a);\\\n",
      "                    return coefficients.at(a).at(b);\\\n",
      "                }\\\n",
      "                else {\\\n",
      "                    return -1;\\\n",
      "                }\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            void swap(vector<T> &input, int i, int j) {\\\n",
      "                int temp = input.at(i);\\\n",
      "                input.at(i) = input.at(j);\\\n",
      "                input.at(j) = temp;\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            void permutations(vector<T> &input, vector<vector<T> > &output, int i) {\\\n",
      "                if(i==input.size()-1) {\\\n",
      "                    output.push_back(input);\\\n",
      "                    return;\\\n",
      "                }\\\n",
      "                else {\\\n",
      "                    for(int j=i; j<input.size(); j++) {\\\n",
      "                        swap(input, i, j);\\\n",
      "                        permutations(input, output, i+1);\\\n",
      "                        swap(input, i, j);\\\n",
      "                    }\\\n",
      "                }\\\n",
      "            }\\\n",
      "            template<typename T>\\\n",
      "            void subsets(vector<T> &input, vector<vector<T> > &output, vector<T> subset, int i) {\\\n",
      "                if(i==input.size()) {\\\n",
      "                    output.push_back(subset);\\\n",
      "                    return;\\\n",
      "                }\\\n",
      "                else {\\\n",
      "                    subset.push_back(input.at(i));\\\n",
      "                    subsets(input, output, subset, i+1);\\\n",
      "                    subset.pop_back(); // Backtracking\\\n",
      "                    subsets(input, output, subset, i+1);\\\n",
      "                }\\\n",
      "            }\\\n",
      "            void mergeTwoSortedArrays(vector<int> &nums, int low1, int high1, int low2, int high2, vector<int> &output) {\\\n",
      "                if(low1>high1) {\\\n",
      "                    for(int i=low2; i<=high2; i++) {\\\n",
      "                        output.push_back(nums.at(i));\\\n",
      "                    }\\\n",
      "                    return;\\\n",
      "                }\\\n",
      "                if(low2>high2) {\\\n",
      "                    for(int i=low1; i<=high1; i++) {\\\n",
      "                        output.push_back(nums.at(i));\\\n",
      "                    }\\\n",
      "                    return;\\\n",
      "                }\\\n",
      "                int i = low1;\\\n",
      "                int j = low2;\\\n",
      "                if(nums.at(i)>nums.at(j)) {\\\n",
      "                    output.push_back(nums.at(j));\\\n",
      "                    mergeTwoSortedArrays(nums, low1, high1, low2+1, high2, output);\\\n",
      "                }\\\n",
      "                if(nums.at(i)<=nums.at(j)) {\\\n",
      "                    output.push_back(nums.at(i));\\\n",
      "                    mergeTwoSortedArrays(nums, low1+1, high1, low2, high2, output);\\\n",
      "                }\\\n",
      "            }\\\n",
      "            void mergeSort(vector<int> &nums, int low, int high) {\\\n",
      "                vector<int> output;\\\n",
      "                if(low>=high) {\\\n",
      "                    return;\\\n",
      "                }\\\n",
      "                int mid = low+(high-low)/2;\\\n",
      "                mergeSort(nums, low, mid);\\\n",
      "                mergeSort(nums, mid+1, high);\\\n",
      "                mergeTwoSortedArrays(nums, low, mid, mid+1, high, output);\\\n",
      "                int i = low;\\\n",
      "                for(auto x: output) {\\\n",
      "                    nums.at(i) = x;\\\n",
      "                    i++;\\\n",
      "                }\\\n",
      "            }\\\n",
      "            class Graph {\\\n",
      "                public:\\\n",
      "                int numberOfNodes;\\\n",
      "                list<int> *l;\\\n",
      "                Graph(int n) {\\\n",
      "                    this->numberOfNodes = n;\\\n",
      "                    l = new list<int>[numberOfNodes];\\\n",
      "                }\\\n",
      "                void addEdge(int i, int j, bool unDirected = true) {\\\n",
      "                    l[i].push_back(j);\\\n",
      "                    if(unDirected) {\\\n",
      "                        l[j].push_back(i);\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                void displayGraph() {\\\n",
      "                    for(int i=0; i<numberOfNodes; i++) {\\\n",
      "                        cout<<i<<\\\" -> \\\";\\\n",
      "                        for(auto x: l[i]) {\\\n",
      "                            cout<<x<<\\\" \\\";\\\n",
      "                        }\\\n",
      "                        cout<<endl;\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                unordered_map<int, bool> visited;\\\n",
      "                void bfs(queue<int> &q) {\\\n",
      "                    if(visited.size()==numberOfNodes) {\\\n",
      "                        while(!q.empty()) {\\\n",
      "                            cout<<q.front()<<\\\" \\\";\\\n",
      "                            q.pop();\\\n",
      "                        }\\\n",
      "                        return;\\\n",
      "                    }\\\n",
      "                    visited[q.front()] = true;\\\n",
      "                    for(auto x: l[q.front()]) {\\\n",
      "                        if(visited.count(x)==0) {\\\n",
      "                            q.push(x);\\\n",
      "                            visited[x] = true;\\\n",
      "                        }\\\n",
      "                    }\\\n",
      "                    cout<<q.front()<<\\\" \\\";\\\n",
      "                    q.pop();\\\n",
      "                    bfs(q);\\\n",
      "                }\\\n",
      "                void dfs(int node) {\\\n",
      "                    if(visited.size()==numberOfNodes) {\\\n",
      "                        cout<<node<<\\\" \\\";\\\n",
      "                        return;\\\n",
      "                    }\\\n",
      "                    visited[node] = true;\\\n",
      "                    for(auto x: l[node]) {\\\n",
      "                        if(visited.count(x)==0) {\\\n",
      "                            visited[x] = true;\\\n",
      "                            dfs(x);\\\n",
      "                        }\\\n",
      "                    }\\\n",
      "                    cout<<node<<\\\" \\\";\\\n",
      "                }\\\n",
      "            };\\\n",
      "            class DSU {\\\n",
      "                public:\\\n",
      "                int numberOfNodes;\\\n",
      "                int *leader;\\\n",
      "                int *rank;\\\n",
      "                list< pair<int, int> > edgeList;\\\n",
      "                DSU(int n) {\\\n",
      "                    this->numberOfNodes = n;\\\n",
      "                    leader = new int[numberOfNodes];\\\n",
      "                    rank = new int[numberOfNodes];\\\n",
      "                    for(int i=0; i<numberOfNodes; i++) {\\\n",
      "                        leader[i] = -1;\\\n",
      "                        rank[i] = 1;\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                void addEdge(int i, int j) {\\\n",
      "                    bool isEdgeAddable = unionSet(i, j);\\\n",
      "                    if(isEdgeAddable) {\\\n",
      "                        pair<int, int> p;\\\n",
      "                        p.first = i;\\\n",
      "                        p.second = j;\\\n",
      "                        edgeList.push_back(p);\\\n",
      "                    }\\\n",
      "                    else {\\\n",
      "                        cout<<\\\"Adding this edge between \\\"<<i<<\\\" and \\\"<<j<<\\\" creates Cycle in Graph\\\"<<endl;\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                bool unionSet(int i, int j) {\\\n",
      "                    int s1 = find(i);\\\n",
      "                    int s2 = find(j);\\\n",
      "                    if(s1!=s2) {\\\n",
      "                        if(rank[s1]>=rank[s2]) {\\\n",
      "                            leader[j] = i;\\\n",
      "                            rank[s1]+=rank[s2];\\\n",
      "                        }\\\n",
      "                        else {\\\n",
      "                            leader[i] = j;\\\n",
      "                            rank[s2]+=rank[s1];\\\n",
      "                        }\\\n",
      "                        return true;\\\n",
      "                    }\\\n",
      "                    else {\\\n",
      "                        // cycle detected\\\n",
      "                        return false;\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                int find(int i) {\\\n",
      "                    if(leader[i]==-1) {\\\n",
      "                        return i;\\\n",
      "                    }\\\n",
      "                    int parent = find(leader[i]);\\\n",
      "                    leader[i] = parent;\\\n",
      "                    return parent;\\\n",
      "                }\\\n",
      "            };\\\n",
      "            struct TrieNode {\\\n",
      "                TrieNode* next[26]; // For 26 characters\\\n",
      "                bool isEnd;\\\n",
      "                TrieNode() {\\\n",
      "                    isEnd = false;\\\n",
      "                    for(int i=0; i<26; i++) {\\\n",
      "                        next[i] = NULL;\\\n",
      "                    }\\\n",
      "                }\\\n",
      "            };\\\n",
      "            TrieNode* trieRoot;\\\n",
      "            void insertTrie(string s) {\\\n",
      "                TrieNode* current = trieRoot;\\\n",
      "                for(auto x: s) {\\\n",
      "                    if(current->next[x-\\'a\\']==NULL) {\\\n",
      "                        current->next[x-\\'a\\'] = new TrieNode;\\\n",
      "                    }\\\n",
      "                    current = current->next[x-\\'a\\'];\\\n",
      "                }\\\n",
      "                current->isEnd = true;\\\n",
      "            }\\\n",
      "            bool searchTrie(string s) {\\\n",
      "                TrieNode* current = trieRoot;\\\n",
      "                for(auto x: s) {\\\n",
      "                    if(current->next[x-\\'a\\']==NULL) {\\\n",
      "                        return false;\\\n",
      "                    }\\\n",
      "                    else {\\\n",
      "                        current = current->next[x-\\'a\\'];\\\n",
      "                    }\\\n",
      "                }\\\n",
      "                if(current->isEnd==false) return false;\\\n",
      "                return true;\\\n",
      "            }\\\n",
      "            vector<int> solve() {\\\n",
      "                vector<int> nums;\\\n",
      "                return nums;\\\n",
      "            }\\\n",
      "            int32_t main() {\\\n",
      "                ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);cerr.tie(0);\\\n",
      "                clock_t initialTime = clock();\\\n",
      "                #ifdef RUN_LOCAL\\\n",
      "                    freopen(\\\"../io/input.txt\\\", \\\"r\\\", stdin);\\\n",
      "                    freopen(\\\"../io/output.txt\\\", \\\"w\\\", stdout);\\\n",
      "                    freopen(\\\"../io/err.txt\\\", \\\"w\\\", stderr);\\\n",
      "                #endif\\\n",
      "                int test = 1;\\\n",
      "                cin>>test;\\\n",
      "                while(test--) {\\\n",
      "                    vector<int> result = solve();\\\n",
      "                    for(auto x: result) {\\\n",
      "                        cout<<x<<\\\" \\\";\\\n",
      "                    }\\\n",
      "                    cout<<endl;\\\n",
      "                }\\\n",
      "                cerr<<((double)clock()-initialTime)/CLOCKS_PER_SEC<<endl;\\\n",
      "            }\""
    ],
    "description": "C++ Code for Advanced Data Structures and Advanced Algorithms"
  }
}
